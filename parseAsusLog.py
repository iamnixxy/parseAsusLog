#
# ParseAsusLog by Nicholas Ho
# Tested with: Python Version 3.11.4, Asus RT-AX88U router
#
# I wrote this script to facilitate Asus router owners in deciding a minimum set of whitelist firewall
# rules for their home network activity. This script was tested only with the logs generated by the
# Asus RT-AX88U router. If the script does not work for your Asus router log, please feel free to
# adjust the regular expressions accordingly to your log format.
#


import re
from collections import defaultdict

def filter_inout_lines(input_file):
	# Dictionary mappings
	mac_addresses_accept = defaultdict(set)				# MAC, IP pairing for ACCEPT
	mac_ports_accept = defaultdict(set)					# MAC, port number pairing for ACCEPT
	
	mac_addresses_drop = defaultdict(set)				# MAC, IP pairing for DROP
	mac_ports_drop = defaultdict(set)					# MAC, port number pairing for DROP
	
	global_port_protocol_accept = defaultdict(set)		# Global port number, protocol pairing for ACCEPT
	global_port_IP_accept = defaultdict(set)			# Global port number, IP pairing for ACCEPT
	
	global_port_protocol_drop = defaultdict(set)		# Global port number, protocol pairing for DROP
	global_port_IP_drop = defaultdict(set)				# Global port number, IP pairing for ACCEPT
	
	# Regex Expressions to extract MAC, IPs, Protocol, Port Numbers according to Asus router log format
	pattern_MAC_IP = r"MAC=(\S+) SRC=(\S+) DST=(\S+)"
	pattern_protocol_port = r"PROTO=(\S+) SPT=(\S+) DPT=(\S+)"
	
	# Open input file
	with open(input_file, 'r') as input_file:
		for line in input_file:
			# Filter only from local network
			if "SRC=192" in line:
			
				# Generate MAC, IP pairing to show all IPs assigned to unique device
				match_MAC_IP = re.search(pattern_MAC_IP, line)
				if match_MAC_IP:
					mac_address = match_MAC_IP.group(1)
					ip_address = match_MAC_IP.group(2)
					dst_IP = match_MAC_IP.group(3)
					if "ACCEPT" in line:
						mac_addresses_accept[mac_address].add(ip_address)
					else:
						mac_addresses_drop[mac_address].add(ip_address)
						
					# Generate pairing for list of destination ports from a unique device
					# Also generate global list of outgoing port numbers and protocols used (TCP/UDP) for LAN network
					match_protocol_port = re.search(pattern_protocol_port, line)
					if match_protocol_port:
						protocol = match_protocol_port.group(1)
						src_port = match_protocol_port.group(2)
						dst_port = match_protocol_port.group(3)
						if "ACCEPT" in line:
							mac_ports_accept[mac_address].add(dst_port)
							global_port_protocol_accept[dst_port].add(protocol)
							global_port_IP_accept[dst_port].add(dst_IP)
						else:
							mac_ports_drop[mac_address].add(dst_port)
							global_port_protocol_drop[dst_port].add(protocol)
							global_port_IP_drop[dst_port].add(dst_IP)
					
	
	# Display devices in LAN network, with associated IP addresses per device, and outgoing destination ports per device (for traffic allowed by router)
	print("Allowed Outgoing Traffic")
	for mac_address, ip_addresses in mac_addresses_accept.items():
		print("MAC Address: ", mac_address)
		print("  IP Address: ", ip_addresses)
		print("  Dst Ports:  ", mac_ports_accept[mac_address])
		print()
		
	# Display unique list of outgoing ports and associated protocols for LAN network (for traffic allowed by router)
	print("Allowed Outgoing Ports & Protocols")
	for dst_port, protocols in global_port_protocol_accept.items():
		print("Dst Port: ", dst_port)
		print("  Protocols: ", protocols)
		print("  Dst IPs:   ", global_port_IP_accept[dst_port])
		print()

	# Display devices in LAN network, with associated IP addresses per device, and outgoing destination ports per device (for traffic dropped by router)
	print("Dropped Outgoing Traffic")	
	for mac_address, ip_addresses in mac_addresses_drop.items():
		print("MAC Address: ", mac_address)
		print("  IP Address: ", ip_addresses)
		print("  Dst Ports:  ", mac_ports_drop[mac_address])
		print()
		
	# Display unique list of outgoing ports and associated protocols for LAN network (for traffic dropped by router)
	print("Dropped Outgoing Ports & Protocols")
	for dst_port, protocols in global_port_protocol_drop.items():
		print("Dst Port: ", dst_port)
		print("  Protocols: ", protocols)
		print("  Dst IPs:   ", global_port_IP_drop[dst_port])
		print()





# Main Body
input_file_path = 'syslog.txt'
filter_inout_lines(input_file_path)